#!/usr/bin/env python3

import sys
import shutil
import argparse

import src as timg

parser = argparse.ArgumentParser(
  timg.version.TIMG_PROG_NAME,
  description=timg.version.TIMG_DESC)

parser.add_argument(
  '-V', '--version',
  help='print version and exit',
  action='store_true')

parser.add_argument(
  'filename',
  nargs='?',
  type=str,
  help='filename of an image')

parser.add_argument(
  '-i', '--invert-background',
  help='invert grayscale in ASCII mode',
  action='store_true')

parser.add_argument(
  '-m', '--method',
  type=str,
  help='''name of a rendering method (use `-m list` to list available methods,
  the default is a24h''',
  metavar='METHOD',
  default='a24h')

parser.add_argument(
  '-r', '--reduce-colors',
  type=int,
  help='reduce color palette of an input image (1-255)',
  metavar='N')

parser.add_argument(
  '-s', '--size',
  type=int,
  help='width of an image',
  metavar='W')

args = parser.parse_args()




methods = {
  'sixel': {
    'class': timg.SixelMethod,
    'desc': 'use sixels - best quality but lowest support'
  },

  'a8f': {
    'class': timg.Ansi8FblockMethod,
    'desc': 'low-resolution ANSI 8-bit palette'
  },

  'a24f': {
    'class': timg.Ansi24FblockMethod,
    'desc': 'low-resolution ANSI 24-bit palette',
  },

  'a8h': {
    'class': timg.Ansi8HblockMethod,
    'desc': 'high-resolution ANSI 8-bit palette'
  },

  'a24h': {
    'class': timg.Ansi24HblockMethod,
    'desc': 'high-resolution ANSI 24-bit palette'
  },
  
  'ascii': {
    'class': timg.ASCIIMethod,
    'desc': 'ASCII art'
  }
}

def show_available_methods():
  print('Available methods:')
  for k, v in methods.items():
    print('  * {:10} {}'.format(k, v['desc']))

if args.version:
  print(timg.version.TIMG_PROG_NAME, timg.version.TIMG_VERSION)
  sys.exit(1)

if args.method == 'list':
  show_available_methods()
  sys.exit(0)

if args.filename is None:
  parser.print_usage()
  print('No filename specified.')
  sys.exit(1)

renderer = timg.Renderer()
renderer.load_image_from_file(args.filename)

if args.size is not None:
  renderer.resize(args.size)

if args.reduce_colors is not None:
  renderer.reduce_colors(args.reduce_colors)

try:
  method = methods[args.method]['class']
except KeyError:
  print('No such method.')
  show_available_methods()
  sys.exit(1)

if method == timg.SixelMethod:
  if args.reduce_colors is None:
    renderer.reduce_colors(16)

elif method in [
  timg.Ansi24FblockMethod,
  timg.Ansi24HblockMethod,
  timg.Ansi8FblockMethod,
  timg.Ansi8HblockMethod,
  timg.ASCIIMethod]:
  if args.size is None:
    renderer.resize(shutil.get_terminal_size()[0] - 1)

if method == timg.ASCIIMethod:
  renderer.render(method, args.invert_background)
else:
  renderer.render(method)
