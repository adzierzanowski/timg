#!/usr/bin/env python3

import sys
import argparse

from PIL import Image

import timg

parser = argparse.ArgumentParser(description="Display an image in terminal.")

parser.add_argument('file',
        type=str,
        help='image file to be shown',
        metavar='FILENAME')
parser.add_argument('-b', '--block',
        type=str,
        help='''use colors from a subset of 8-bit ANSI pallette
        (works only with -8 switch). BLOCK can be: "standard", "intensive",
        "cube", "grayscale" or an expression in form of ranges separated by
        a comma, e.g. "0..10,20..40,128" or "0,231"''',
        metavar='BLOCK')
parser.add_argument('-c', '--charset',
        type=str,
        help='print image using characters from the provided STRING',
        metavar='STRING')
parser.add_argument('-r', '--random-chars',
        help='print characters from the provided charset in a random order',
        action='store_true')
parser.add_argument('-s', '--size',
        type=int,
        help='number of characters to be printed horizontally',
        metavar='N',
        default=70)
parser.add_argument('-8', '--8-bit',
        dest='true_color',
        help='''use 8-bit color pallette (much slower (because it finds the
        closest ANSI color code for each pixel) and uglier (because it\'s just
        256 colors) but allows a pallette subset to be given and supports dumb
        terminal emulators)''',
        action='store_false')
parser.add_argument('-x', '--high-resolution',
        help='display image using half blocks',
        action='store_true')

args = parser.parse_args()

try:
    image = Image.open(args.file)
except IsADirectoryError as e:
    sys.stderr.write('{}\n'.format(e))
    sys.exit(1)
except OSError as e:
    sys.stderr.write('{}\n'.format(e))
    sys.exit(1)

try:
    bloxels = timg.create_bloxels(
        image,
        size=args.size,
        high_resolution=args.high_resolution
    )
except TypeError as e:
    sys.stderr.write('Couldn\'t properly read the file.\n')
    sys.exit(1)

try:
    timg.display(
        bloxels,
        high_resolution=args.high_resolution,
        charset=args.charset,
        true_color=args.true_color,
        random_chars=args.random_chars,
        block=args.block
    )
except KeyboardInterrupt:
    print('\033[0m')

